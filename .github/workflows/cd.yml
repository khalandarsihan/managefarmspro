name: CD

on:
  pull_request:
    branches:
      - staging  # Trigger CD on PR to staging branch

  workflow_dispatch:  # Allow manual trigger for testing and deployments

permissions:
  contents: read
  packages: write
  issues: write
  pull-requests: write

jobs:
  deploy:
    name: Deploy to Staging Server
    runs-on: ubuntu-latest  # Use GitHub-hosted runner

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Generate Version Number
        run: |
          version=$(date +"%Y%m%d%H%M%S")
          echo "version=$version" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.MY_PAT_SECRET }}

      - name: Build and Push Docker Image
        run: |
          docker buildx build \
            --platform linux/amd64 \
            --build-arg FRAPPE_REPO=https://github.com/khalandarsihan/frappe.git \
            --build-arg FRAPPE_BRANCH=version-15 \
            --build-arg ERPNEXT_REPO=https://github.com/khalandarsihan/erpnext.git \
            --build-arg ERPNEXT_BRANCH=version-15 \
            --build-arg PAYMENTS_REPO=https://github.com/khalandarsihan/payments.git \
            --build-arg PAYMENTS_BRANCH=version-15 \
            --build-arg CUSTOM_APP_REPO=$GITHUB_WORKSPACE \
            -t ghcr.io/${{ github.repository_owner }}/managefarmspro:${{ env.version }} \
            -t ghcr.io/${{ github.repository_owner }}/managefarmspro:latest \
            --push .

      - name: Set Docker Image and Tag as Environment Variables
        run: |
          echo "CUSTOM_IMAGE=ghcr.io/${{ github.repository_owner }}/managefarmspro" >> $GITHUB_ENV
          echo "CUSTOM_TAG=${{ env.version }}" >> $GITHUB_ENV

      - name: Deploy to Staging Server
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            export CUSTOM_IMAGE="${{ env.CUSTOM_IMAGE }}"
            export CUSTOM_TAG="${{ env.CUSTOM_TAG }}"
            echo "Deploying ${CUSTOM_IMAGE}:${CUSTOM_TAG} to the staging server..."

            # Update the docker-compose configuration with the new image tag
            sed -i "s|ghcr.io/khalandarsihan/managefarmspro/frappe-app:.*|${CUSTOM_IMAGE}:${CUSTOM_TAG}|g" /home/sihan/staging/frappe_docker/pwd.yml

            # Stop and remove any running containers
            cd /home/sihan/staging/frappe_docker
            docker compose -f pwd.yml down

            # Prune old Docker images and volumes to save space
            docker system prune -af
            docker volume prune -f

            # Pull the latest images and bring up the containers with the new configuration
            docker compose -f pwd.yml pull
            docker compose -f pwd.yml up -d

            # Wait for services to start
            sleep 60

            # Check if the application is accessible
            if curl -s -o /dev/null -w "%{http_code}" https://khasihan.xyz | grep 200; then
              echo "Deployment successful!"
            else
              echo "Deployment failed."
              exit 1
            fi

