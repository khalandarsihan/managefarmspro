name: CI

on:
  pull_request:
    branches:
      - staging
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  tests:
    runs-on: ubuntu-latest  # Use GitHub runner instead of self-hosted

    services:
      redis-cache:
        image: redis:alpine
        ports:
          - 13000:6379
      redis-queue:
        image: redis:alpine
        ports:
          - 11000:6379
      mariadb:
        image: mariadb:10.6
        env:
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3306:3306
        options: --health-cmd="mariadb-admin ping" --health-interval=5s --health-timeout=2s --health-retries=3

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.9'

      - name: Install dependencies
        run: |
          pip install pre-commit
          pre-commit install

      - name: Run pre-commit
        run: pre-commit run --all-files

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '18.20.2'
          check-latest: false

      - name: Install Yarn
        run: |
          sudo apt-get update && sudo apt-get install -y yarn

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/*requirements.txt', '**/pyproject.toml', '**/setup.py', '**/setup.cfg') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: 'echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT'

      - uses: actions/cache@v3
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install MariaDB Client
        run: |
          sudo apt-get update
          sudo apt-get install -y mariadb-client-10.6

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Cleanup previous Bench instance
        run: |
          if [ -d /home/runner/frappe-bench ]; then
            sudo rm -rf /home/runner/frappe-bench
          fi

      - name: Setup Frappe Bench
        run: |
          pip install frappe-bench
          bench init --skip-redis-config-generation --skip-assets --python "$(which python)" --frappe-branch version-15 /home/runner/frappe-bench
          mariadb --host 127.0.0.1 --port 3306 -u root -proot -e "SET GLOBAL character_set_server = 'utf8mb4'"
          mariadb --host 127.0.0.1 --port 3306 -u root -proot -e "SET GLOBAL collation_server = 'utf8mb4_unicode_ci'"

      - name: Install ERPNext and Custom Apps
        working-directory: /home/runner/frappe-bench
        run: |
          bench get-app frappe https://github.com/khalandarsihan/frappe --branch version-15  # Use forked repo
          bench get-app erpnext https://github.com/khalandarsihan/erpnext --branch version-15  # Use forked repo
          bench get-app payments https://github.com/khalandarsihan/payments --branch version-15  # Use forked repo
          bench get-app managefarmspro $GITHUB_WORKSPACE  # Use local repo for managefarmspro
          bench setup requirements --dev
          bench new-site --db-root-password root --admin-password admin development.localhost
          bench --site development.localhost install-app frappe
          bench --site development.localhost install-app erpnext
          bench --site development.localhost install-app payments
          bench --site development.localhost install-app managefarmspro
          bench build

      - name: Start Frappe App
        working-directory: /home/runner/frappe-bench
        run: |
          echo "web: bench serve --port 8000" > Procfile
          nohup bench start &

      - name: Verify Bench Start
        run: |
          ps aux | grep 'bench serve'

      - name: Increase Sleep Time
        run: sleep 10  # Increase sleep time to 10 seconds

      - name: Get Site URL
        run: echo "Site is running at: http://localhost:8000"

      - name: Comment on PR with Site URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "The Frappe site for this PR is available at: http://localhost:8000"
            });

      - name: Install ssmtp
        run: |
          sudo apt-get update
          sudo apt-get install -y ssmtp

      - name: Send Email Notification with Site URL
        run: |
          echo -e "To: khasihan@gmail.com\nFrom: ${{ secrets.SMTP_USERNAME }}\nSubject: Frappe Site for PR\n\nThe Frappe site for this PR is available at: http://localhost:8000" | ssmtp khasihan@gmail.com

