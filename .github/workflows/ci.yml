name: CI

on:
  push:
    branches:
      - main
  pull_request:

permissions:
  contents: read
  issues: write
  pull-requests: write

concurrency:
  group: main-managefarmspro-${{ github.event.number }}
  cancel-in-progress: true

jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    name: Server

    services:
      redis-cache:
        image: redis:alpine
        ports:
          - 13000:6379
      redis-queue:
        image: redis:alpine
        ports:
          - 11000:6379
      mariadb:
        image: mariadb:10.6
        env:
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3306:3306
        options: --health-cmd="mariadb-admin ping" --health-interval=5s --health-timeout=2s --health-retries=3

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install pre-commit
          pre-commit install

      - name: Run pre-commit
        run: pre-commit run --all-files

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          check-latest: true

      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/*requirements.txt', '**/pyproject.toml', '**/setup.py', '**/setup.cfg') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-

      - name: Install MariaDB Client
        run: |
          sudo apt update
          sudo apt-get install mariadb-client-10.6

      - name: Setup Frappe Bench
        run: |
          pip install frappe-bench
          mkdir -p /workspace/development/frappe-bench
          cd /workspace/development/frappe-bench
          bench init --skip-redis-config-generation --skip-assets --python "$(which python)" .
          mariadb --host 127.0.0.1 --port 3306 -u root -proot -e "SET GLOBAL character_set_server = 'utf8mb4'"
          mariadb --host 127.0.0.1 --port 3306 -u root -proot -e "SET GLOBAL collation_server = 'utf8mb4_unicode_ci'"

      - name: Install Frappe App
        run: |
          cd /workspace/development/frappe-bench
          bench get-app managefarmspro $GITHUB_WORKSPACE
          bench setup requirements --dev
          bench new-site --db-root-password root --admin-password admin development.localhost
          bench --site development.localhost install-app managefarmspro
          bench build

      - name: Start Frappe App
        run: |
          cd /workspace/development/frappe-bench
          echo "web: bench serve --port 8000" > Procfile
          nohup bench start &

      - name: Download and Install Ngrok
        run: |
          curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
          sudo apt update
          sudo apt install ngrok

      - name: Start Ngrok
        run: |
          ngrok authtoken ${{ secrets.NGROK_AUTH_TOKEN }}
          nohup ngrok http 8000 &

      - name: Get Ngrok URL
        run: |
          sleep 15  # Increase sleep time to ensure Ngrok tunnel is fully up
          curl -s http://localhost:4040/api/tunnels | jq -r .tunnels[0].public_url > ngrok_url.txt
          if [ ! -s ngrok_url.txt ]; then
            echo "Ngrok URL file is empty. Exiting with error."
            exit 1
          fi
        id: ngrok-url

      - name: Comment on PR with Ngrok URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const url = fs.readFileSync('ngrok_url.txt', 'utf8').trim();
            if (!url) {
              throw new Error('Ngrok URL is empty');
            }
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `The Frappe site for this PR is available at: ${url}`
            });

      - name: Test Frappe App
        run: |
          sleep 30  # Wait for the app to start
          curl -v http://localhost:8000

